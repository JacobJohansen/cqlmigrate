plugins {
    id 'java'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id 'pl.allegro.tech.build.axion-release' version '1.3.3'
}

scmVersion {
    tag {
        prefix = 'cqlmigrate'
    }
}

group = 'uk.sky.cirrus'
version = scmVersion.version
sourceCompatibility = '1.8'

if (!project.hasProperty("openSourceRepoUrl")) {
    ext.openSourceRepoUrl = "dummy"
}
if (!project.hasProperty("openSourceRepoUser")) {
    ext.openSourceRepoUser = "dummy"
}
if (!project.hasProperty("openSourceRepoPass")) {
    ext.openSourceRepoPass = "dummy"
}

publishing {
    repositories {
        maven {
            url openSourceRepoUrl
            name 'openSource'

            credentials {
                username = openSourceRepoUser
                password = openSourceRepoPass
            }
        }
    }
    publications {
        artifacts(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

configurations {
    testCompileAndFunctional
    functional.extendsFrom testCompileAndFunctional
    testCompile.extendsFrom testCompileAndFunctional
}

dependencies {
    compile 'com.datastax.cassandra:cassandra-driver-core:2.1.8'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'com.google.code.findbugs:jsr305:3.0.0'

    testCompile 'org.apache.logging.log4j:log4j-core:2.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:2.0.0'
    testCompile 'org.scassandra:java-client:0.10.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'

    testCompileAndFunctional 'org.cassandraunit:cassandra-unit-shaded:2.1.9.2'
    functional 'org.slf4j:slf4j-simple:1.7.12'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

idea {
    module {
        downloadSources = true
    }
}

artifacts {
    archives sourcesJar
    archives jar
}

task testJar (type: Jar) {
    classifier = 'tests'
    from (sourceSets.main.output, sourceSets.test.output)
    from {
        (configurations.runtime + configurations.functional).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'uk.sky.cqlmigrate.example.CmdLineEntryPoint'
    }
}

// Functional test is to run the migrateSchema on a jar containing embedded CQL files and have it return successfully.
task functional (dependsOn: ['testJar']) << {
    exec {
        executable = 'java'
        args = ['-jar', testJar.archivePath, 'migrateSchema']
    }
}

check.dependsOn(functional)
